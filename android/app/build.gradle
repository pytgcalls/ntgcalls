plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.signing)
    alias(libs.plugins.vanniktech.publish)
}

import com.vanniktech.maven.publish.SonatypeHost
import com.vanniktech.maven.publish.AndroidSingleVariantLibrary
import javax.inject.Inject

abstract class VersionInfoProvider implements ValueSource<Details, Params> {
    @Inject
    abstract ExecOperations getExecOperations()

    @Override
    Details obtain() {
        def path = ""
        def moduleFile = parameters.module.asFile.getOrNull()

        if (moduleFile?.exists()) {
            path = moduleFile.absolutePath
        }

        def cmakeListsContent = parameters.module.file("$path/../../CMakeLists.txt").get().asFile.text
        def versionNameRaw = (cmakeListsContent =~ /project\(ntgcalls.*VERSION ([\d.]+).*\)/)[0][1]

        def gitOutput = new ByteArrayOutputStream()
        execOperations.exec { execSpec ->
            execSpec.commandLine "git", "-C", path, "rev-parse", "--short", "HEAD"
            execSpec.standardOutput = gitOutput
        }

        def versionOutput = new ByteArrayOutputStream()
        execOperations.exec { execSpec ->
            execSpec.commandLine "cmake", "-DANDROID_TAGS=ON", "-DPROJECT_VERSION=$versionNameRaw", "-P", "$path/../../cmake/VersionUtil.cmake"
            execSpec.errorOutput = versionOutput
        }

        def versionName = new String(versionOutput.toByteArray()).trim()
        def versionInfo = versionName.split("-")
        def tokenizedPart = versionInfo[0].tokenize(".")
        def major = tokenizedPart[0].toInteger()
        def minor = tokenizedPart[1].toInteger()
        def patch = tokenizedPart[2].toInteger()

        def versionCode = (major * 10000000 + minor * 1000000 + patch * 10000)

        if (versionInfo.size() > 1) {
            def suffix = versionInfo[1]
            if (suffix.startsWith("alpha")) {
                versionCode += 1000 + suffix.substring(5).toInteger()
            } else if (suffix.startsWith("beta")) {
                versionCode += 2000 + suffix.substring(4).toInteger()
            } else if (suffix.startsWith("rc")) {
                versionCode += 3000 + suffix.substring(2).toInteger()
            } else {
                throw new IllegalArgumentException("Invalid version format: ${suffix}")
            }
        } else {
            versionCode += 9999
        }

        return new Details(
            versionName,
            versionCode,
            new String(gitOutput.toByteArray()).trim()
        )
    }

    interface Params extends ValueSourceParameters {
        DirectoryProperty getModule()
    }

    static class Details {
        final String versionName
        final int versionCode
        final String gitCommit

        Details(String versionName, int versionCode, String gitCommit) {
            this.versionName = versionName
            this.versionCode = versionCode
            this.gitCommit = gitCommit
        }
    }
}

def baseDir = "$projectDir/../.."
def depsDir = "$baseDir/deps"
def ndkDir = "$depsDir/ndk/src"
def ntgcallsIncludeDir = "$baseDir/ntgcalls/include"
def wrtcIncludeDir = "$baseDir/wrtc/include"
def androidCmakeDir = "$baseDir/cmake/Android.cmake"
def versionProps = new Properties()
new File("$baseDir/version.properties").withInputStream {
    versionProps.load(it)
}

def versionInfoProvider = providers.of(VersionInfoProvider) {
    parameters.module = layout.projectDirectory
}.get()

android {
    namespace = "org.pytgcalls.ntgcalls"
    compileSdk = 35
    testBuildType = "release"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        minSdk = 16
        targetSdk = 35

        buildConfigField 'String', 'GIT_COMMIT', "\"${versionInfoProvider.gitCommit}\""
        buildConfigField 'int', 'VERSION_CODE', "${versionInfoProvider.versionCode}"
        buildConfigField 'String', 'VERSION_NAME', "\"${versionInfoProvider.versionName}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags '-std=gnu++20'
                arguments "-DANDROID_STL=none",
                        "-DANDROID_NATIVE_API_LEVEL=${versionProps.getProperty('version.sdk_compile')}",
                        "-DANDROID_PLATFORM=${versionProps.getProperty('version.sdk_compile')}",
                        "-DANDROID_CPP_FEATURES=exceptions rtti",
                        "-DCMAKE_BUILD_TYPE=RelWithDebInfo",
                        "-DLIBCXX_INCLUDE_DIR=$depsDir/libcxx/include",
                        "-DCMAKE_TOOLCHAIN_FILE=$ndkDir/build/cmake/android.toolchain.cmake",
                        "-DANDROID_NDK=$ndkDir",
                        "-DDEPS_DIR=$depsDir",
                        "-DNTGCALLS_INCLUDE_DIR=$ntgcallsIncludeDir",
                        "-DWRTC_INCLUDE_DIR=$wrtcIncludeDir",
                        "-DANDROID_CMAKE_DIR=$androidCmakeDir",
                        "-DCMAKE_ANDROID_EXCEPTIONS=ON"
            }
        }
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }
    sourceSets.main.jniLibs.srcDirs = ['./jni']

    externalNativeBuild {
        cmake {
            path = "src/main/jni/CMakeLists.txt"
            version = "3.22.1"
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            testCoverageEnabled = true
            ndk {
                debugSymbolLevel = 'SYMBOL_TABLE'
            }
        }
    }

    buildFeatures {
        buildConfig = true
    }
}

mavenPublishing {
    coordinates("io.github.pytgcalls", "ntgcalls", versionInfoProvider.versionName)

    pom {
        name = "ntgcalls"
        description = "A Native Implementation of Telegram Calls in a seamless way."
        url = "https://github.com/pytgcalls/ntgcalls"

        licenses {
            license {
                name = "GNU Lesser General Public License v3.0"
                url = "https://www.gnu.org/licenses/lgpl-3.0.html"
                distribution = "repo"
            }
        }

        developers {
            developer {
                id = "Laky-64"
                name = "Laky64"
                url = "https://github.com/Laky-64"
            }
        }

        scm {
            connection.set("scm:git:git://github.com/pytgcalls/ntgcalls.git")
            developerConnection.set("scm:git:ssh://github.com/pytgcalls/ntgcalls.git")
            url.set("https://github.com/pytgcalls/ntgcalls")
        }
    }

    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    configure(new AndroidSingleVariantLibrary("release", true, true))
    signAllPublications()
}


dependencies {
    implementation 'androidx.annotation:annotation:1.9.1'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation fileTree(dir: "$depsDir/libwebrtc/src/jar/", include: ['webrtc.jar'])
}